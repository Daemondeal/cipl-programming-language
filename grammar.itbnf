program -> declaration* EOF ;


declaration ->  varDeclaration 
              | procDeclaration 
              | classDeclaration
              | statement


classDeclaration -> "class" IDENTIFIER ":" INDENT function* DEDENT ;




statment -> exprStatement 
          | ifStatement 
          | whileStatement 
          | repeatStatement 
          | forStatement
          | breakStatement 
          | passStatement 
          | returnStatement
          | block ;


returnStatement -> "return" expression? LINE_END ;


varDeclaration -> "let" IDENTIFIER ("=" expression )? LINE_END ;
procDeclaration -> "proc" procedure ;
procedure -> IDENTIFIER "(" parameters? ")" ":" LINE_END block ;

parameters -> IDENTIFIER ( "," IDENTIFIER )* ;

ifStatement -> "if" expression ":" ( LINE_END )? statement ( "else" ":" ( LINE_END )? statement )? ;
whileStatement -> "while" expression ":" statement ;
repeatStatement -> "repeat" IDENTIFIER expression ":" statement ;

forStatement -> "for" IDENTIFIER "in" expression ( ".." | "..." ) expression ":" statement ;
breakStatement -> "break" LINE_END ;

block -> INDENT declaration* DEDENT ;


exprStatement -> expression LINE_END ;
passStatement -> "pass" LINE_END ;
# printStatement -> "print" expression LINE_END ; DEPRECATED


# Expressions
expression -> assignment ;

assignment -> (call "." )? IDENTIFIER "=" assignment | logic_or ;

logic_or -> logic_and ( "or" logic_and )* ;
logic_and -> equality ( "and" equality )* ;

equality -> comparison ( ("==" | "!=" ) comparison )* ;
comparison -> term ((">" | ">=" | "<" | "<=") term )* ;
term -> factor (("+" | "-" | "~") factor )* ;
factor -> unary (("*" | "*") unary )* ;

unary -> ("-" | "not") unary | call ;
call -> primary ( "(" arguments? ")" | "." IDENTIFIER )*;

arguments -> expression ( "," expression )* ;


primary -> literal | grouping | IDENTIFIER;

literal = NUMBER | STRING | "true" | "false" | "null" ;
grouping = "(" expression ")" ;